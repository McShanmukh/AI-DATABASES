{"ast":null,"code":"import _defineProperty from \"/home/chandhan/ai_databases/Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/chandhan/ai_databases/Frontend/src/components/login/register.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\n\nfunction ValidationMessage(props) {\n  if (!props.valid) {\n    return React.createElement(\"div\", {\n      className: \"error-msg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 6\n      },\n      __self: this\n    }, props.message);\n  }\n\n  return null;\n}\n\nexport class Register extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      username: '',\n      usernameValid: false,\n      email: '',\n      emailValid: false,\n      password: '',\n      passwordValid: false,\n      passwordConfirm: '',\n      passwordConfirmValid: false,\n      formValid: false,\n      errorMsg: {}\n    };\n\n    this.validateForm = () => {\n      const _this$state = this.state,\n            usernameValid = _this$state.usernameValid,\n            emailValid = _this$state.emailValid,\n            passwordValid = _this$state.passwordValid,\n            passwordConfirmValid = _this$state.passwordConfirmValid;\n      this.setState({\n        formValid: usernameValid && emailValid && passwordValid && passwordConfirmValid\n      });\n    };\n\n    this.updateFirstname = firstname => {\n      this.setState({\n        firstname\n      }, this.validateFirstname);\n    };\n\n    this.updateLastname = lastname => {\n      this.setState({\n        lastname\n      }, this.validateLastname);\n    };\n\n    this.validateFirstname = () => {\n      const firstname = this.state.firstname;\n      let firstnameValid = true;\n\n      let errorMsg = _objectSpread({}, this.state.errorMsg);\n\n      if (firstname.length < 3) {\n        firstnameValid = false;\n        errorMsg.firstname = 'Must be at least 3 characters long';\n      }\n\n      this.setState({\n        firstnameValid,\n        errorMsg\n      }, this.validateForm);\n    };\n\n    this.validateLastname = () => {\n      const lastname = this.state.lastname;\n      let lastnameValid = true;\n\n      let errorMsg = _objectSpread({}, this.state.errorMsg);\n\n      if (lastname.length < 3) {\n        lastnameValid = false;\n        errorMsg.lastname = 'Must be at least 3 characters long';\n      }\n\n      this.setState({\n        lastnameValid,\n        errorMsg\n      }, this.validateForm);\n    };\n\n    this.updateEmail = email => {\n      this.setState({\n        email\n      }, this.validateEmail);\n    };\n\n    this.validateEmail = () => {\n      const email = this.state.email;\n      let emailValid = true;\n\n      let errorMsg = _objectSpread({}, this.state.errorMsg); // checks for format _@_._\n\n\n      if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\n        emailValid = false;\n        errorMsg.email = 'Invalid email format';\n      }\n\n      this.setState({\n        emailValid,\n        errorMsg\n      }, this.validateForm);\n    };\n\n    this.updatePassword = password => {\n      this.setState({\n        password\n      }, this.validatePassword);\n    };\n\n    this.validatePassword = () => {\n      const password = this.state.password;\n      let passwordValid = true;\n\n      let errorMsg = _objectSpread({}, this.state.errorMsg); // must be 6 chars\n      // must contain a number\n      // must contain a special character\n\n\n      if (password.length < 6) {\n        passwordValid = false;\n        errorMsg.password = 'Password must be at least 6 characters long';\n      } else if (!/\\d/.test(password)) {\n        passwordValid = false;\n        errorMsg.password = 'Password must contain a digit';\n      } else if (!/[!@#$%^&*]/.test(password)) {\n        passwordValid = false;\n        errorMsg.password = 'Password must contain special character: !@#$%^&*';\n      }\n\n      this.setState({\n        passwordValid,\n        errorMsg\n      }, this.validateForm);\n    };\n\n    this.updatePhone = phone => {\n      this.setState({\n        phone\n      }, this.validatePhone);\n    };\n\n    this.validatePhone = () => {\n      const phone = this.state.phone;\n      let phoneValid = true;\n\n      let errorMsg = _objectSpread({}, this.state.errorMsg); // must be 10 chars\n      // must be a number\n      // must no contain a special character\n\n\n      if (!/\\d/.test(phone)) {\n        phoneValid = false;\n        errorMsg.phone = 'Phonenumber must not contain a letter';\n      } else if (/[!@.#$%^&*]/.test(phone)) {\n        phoneValid = false;\n        errorMsg.phone = 'Phonenumber must not contain special character: !@#$%^&*';\n      } else if (phone.length > 10) {\n        phoneValid = false;\n        errorMsg.phone = 'Phonenumber Must have 10 digits only';\n      } else if (!/\\d/.test(phone)) {\n        phoneValid = false;\n        errorMsg.phone = 'Phonenumber must not contain a letter';\n      }\n\n      this.setState({\n        phoneValid,\n        errorMsg\n      }, this.validateForm);\n    };\n\n    this.updatePasswordConfirm = passwordConfirm => {\n      this.setState({\n        passwordConfirm\n      }, this.validatePasswordConfirm);\n    };\n\n    this.validatePasswordConfirm = () => {\n      const _this$state2 = this.state,\n            passwordConfirm = _this$state2.passwordConfirm,\n            password = _this$state2.password;\n      let passwordConfirmValid = true;\n\n      let errorMsg = _objectSpread({}, this.state.errorMsg);\n\n      if (password !== passwordConfirm) {\n        passwordConfirmValid = false;\n        errorMsg.passwordConfirm = 'Passwords do not match';\n      }\n\n      this.setState({\n        passwordConfirmValid,\n        errorMsg\n      }, this.validateForm);\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"base-container\",\n      ref: this.props.containerRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"Register\"), React.createElement(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"forms\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, \"Firstname\", React.createElement(\"input\", {\n      type: \"text\",\n      label: \"name\",\n      value: this.state.firstName,\n      onChange: event => this.setState({\n        firstName: event.target.value\n      }),\n      placeholder: \"Enter Firstname\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"forms\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, \"Lastname\", React.createElement(\"input\", {\n      type: \"text\",\n      label: \"name\",\n      value: this.state.LastName,\n      onChange: event => this.setState({\n        LastName: event.target.value\n      }),\n      placeholder: \"Enter LastName\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"forms\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, \"phoneName\", React.createElement(\"input\", {\n      type: \"text\",\n      label: \"name\",\n      value: this.state.phoneName,\n      onChange: event => this.setState({\n        phoneName: event.target.value\n      }),\n      placeholder: \"Enter phoneName\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"forms\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, \"Email\", React.createElement(\"input\", {\n      type: \"text\",\n      label: \"name\",\n      value: this.state.Email,\n      onChange: event => this.setState({\n        Email: event.target.value\n      }),\n      placeholder: \"Enter Email\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"forms\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, \"password\", React.createElement(\"input\", {\n      type: \"text\",\n      label: \"name\",\n      value: this.state.password,\n      onChange: event => this.setState({\n        password: event.target.value\n      }),\n      placeholder: \"Enter password\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"forms\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, \"confirmPassword\", React.createElement(\"input\", {\n      type: \"text\",\n      label: \"name\",\n      value: this.state.confirmPassword,\n      onChange: event => this.setState({\n        confirmPassword: event.target.value\n      }),\n      placeholder: \"Enter confirmPassword\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, \"Register\"))))));\n  }\n\n}","map":{"version":3,"sources":["/home/chandhan/ai_databases/Frontend/src/components/login/register.jsx"],"names":["React","ValidationMessage","props","valid","message","Register","Component","state","username","usernameValid","email","emailValid","password","passwordValid","passwordConfirm","passwordConfirmValid","formValid","errorMsg","validateForm","setState","updateFirstname","firstname","validateFirstname","updateLastname","lastname","validateLastname","firstnameValid","length","lastnameValid","updateEmail","validateEmail","test","updatePassword","validatePassword","updatePhone","phone","validatePhone","phoneValid","updatePasswordConfirm","validatePasswordConfirm","render","containerRef","handleSubmit","firstName","event","target","value","LastName","phoneName","Email","confirmPassword"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nfunction ValidationMessage(props) {\n  if (!props.valid) {\n    return(\n      <div className='error-msg'>{props.message}</div>\n    )\n  }\n  return null;\n}\n\nexport class Register extends React.Component {\n  \n  state = {\n    username: '', usernameValid: false,\n    email: '', emailValid: false,\n    password: '', passwordValid: false,\n    passwordConfirm: '', passwordConfirmValid: false,\n    formValid: false,\n    errorMsg: {}\n  }\n\n  validateForm = () => {\n    const {usernameValid, emailValid, passwordValid, passwordConfirmValid} = this.state;\n    this.setState({\n      formValid: usernameValid && emailValid && passwordValid && passwordConfirmValid\n    })\n  }\n\n  updateFirstname = (firstname) => {\n    this.setState({firstname}, this.validateFirstname)\n  }\n updateLastname = (lastname) => {\n    this.setState({lastname}, this.validateLastname)\n  }\n\n  validateFirstname = () => {\n    const {firstname} = this.state;\n    let firstnameValid = true;\n    let errorMsg = {...this.state.errorMsg}\n\n    if (firstname.length < 3) {\n      firstnameValid = false;\n      errorMsg.firstname = 'Must be at least 3 characters long'\n    }\n\n    this.setState({firstnameValid, errorMsg}, this.validateForm)\n  }\n   validateLastname = () => {\n    const {lastname} = this.state;\n    let lastnameValid = true;\n    let errorMsg = {...this.state.errorMsg}\n\n    if (lastname.length < 3) {\n      lastnameValid = false;\n      errorMsg.lastname = 'Must be at least 3 characters long'\n    }\n\n    this.setState({lastnameValid, errorMsg}, this.validateForm)\n  }\n\n   updateEmail = (email) => {\n    this.setState({email}, this.validateEmail)\n  }\n\n  validateEmail = () => {\n    const {email} = this.state;\n    let emailValid = true;\n    let errorMsg = {...this.state.errorMsg}\n\n    // checks for format _@_._\n    if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)){\n      emailValid = false;\n      errorMsg.email = 'Invalid email format'\n    }\n\n    this.setState({emailValid, errorMsg}, this.validateForm)\n  }\n\n  updatePassword = (password) => {\n    this.setState({password}, this.validatePassword);\n  }\n\n  validatePassword = () => {\n    const {password} = this.state;\n    let passwordValid = true;\n    let errorMsg = {...this.state.errorMsg}\n\n    // must be 6 chars\n    // must contain a number\n    // must contain a special character\n\n    if (password.length < 6) {\n      passwordValid = false;\n      errorMsg.password = 'Password must be at least 6 characters long';\n    } else if (!/\\d/.test(password)){\n      passwordValid = false;\n      errorMsg.password = 'Password must contain a digit';\n    } else if (!/[!@#$%^&*]/.test(password)){\n      passwordValid = false;\n      errorMsg.password = 'Password must contain special character: !@#$%^&*';\n    }\n\n    this.setState({passwordValid, errorMsg}, this.validateForm);\n  }\n  updatePhone = (phone) => {\n    this.setState({phone}, this.validatePhone);\n  }\n\n  validatePhone = () => {\n    const {phone} = this.state;\n    let phoneValid = true;\n    let errorMsg = {...this.state.errorMsg}\n\n    // must be 10 chars\n    // must be a number\n    // must no contain a special character\n\n    \n     if (!/\\d/.test(phone)){\n      phoneValid = false;\n      errorMsg.phone = 'Phonenumber must not contain a letter';\n    } else if (/[!@.#$%^&*]/.test(phone)){\n      phoneValid = false;\n      errorMsg.phone = 'Phonenumber must not contain special character: !@#$%^&*';\n    }\n    else if (phone.length > 10) {\n      phoneValid = false;\n      errorMsg.phone = 'Phonenumber Must have 10 digits only';\n    } else if (!/\\d/.test(phone)){\n      phoneValid = false;\n      errorMsg.phone = 'Phonenumber must not contain a letter';\n    }\n\n    this.setState({phoneValid, errorMsg}, this.validateForm);\n  }\n\n  updatePasswordConfirm = (passwordConfirm) => {\n    this.setState({passwordConfirm}, this.validatePasswordConfirm)\n  }\n\n  validatePasswordConfirm = () => {\n    const {passwordConfirm, password} = this.state;\n    let passwordConfirmValid = true;\n    let errorMsg = {...this.state.errorMsg}\n\n    if (password !== passwordConfirm) {\n      passwordConfirmValid = false;\n      errorMsg.passwordConfirm = 'Passwords do not match'\n    }\n\n    this.setState({passwordConfirmValid, errorMsg}, this.validateForm);\n  }\n  \n\n  render() {\n    return (\n      <div className=\"base-container\" ref={this.props.containerRef}>\n        <div className=\"header\">Register</div>\n        <div className=\"content\">\n          <div className=\"form\">\n          <form onSubmit={this.handleSubmit}>\n            {/* <div className=\"splitname\">\n              <label htmlFor=\"username\">First Name</label>\n              < ValidationMessage valid={this.state.firstnameValid} message={this.state.errorMsg.firstname} />\n              <input type=\"text\" name=\"firstname\" placeholder=\"UserName\" required=\"true\" value={this.state.firstname} onChange={(e) => this.updateFirstname(e.target.value)}/>\n            </div> \n                <br/>\n              <div className=\"splitname\">\n              <label htmlFor=\"username\">Last Name</label>\n              < ValidationMessage valid={this.state.lastnameValid} message={this.state.errorMsg.lastname} />\n              <input type=\"text\" name=\"lastname\" placeholder=\"UserName\" required=\"true\" value={this.state.lastname} onChange={(e) => this.updateLastname(e.target.value)}/>\n            </div> \n                <br/>\n                <div className=\"form-group\">\n              <label htmlFor=\"email\">E-Mail</label>\n              < ValidationMessage valid={this.state.emailValid} message={this.state.errorMsg.email} />\n              <input type=\"text\" name=\"e-mail\" placeholder=\"E-Mail\" value={this.state.email} onChange={(e) => this.updateEmail(e.target.value)} />\n            </div> \n                <br/>\n                <div className=\"form-group\">\n              <label htmlFor=\"phone\">Phone-Number</label>\n               < ValidationMessage valid={this.state.phoneValid} message={this.state.errorMsg.phone} />\n              <input type=\"tel\" pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\" name=\"phone\" placeholder=\"Phone-Number\" onChange={(e) => this.updatePhone(e.target.value)} /> \n            </div> \n                <br/>  \n                <div className=\"form-group\">\n              <label htmlFor=\"password\">Password</label>\n               < ValidationMessage valid={this.state.passwordValid} message={this.state.errorMsg.password} />\n              <input type=\"password\" name=\"password\" placeholder=\"password\" value={this.state.password} onChange={(e) => this.updatePassword(e.target.value)} />\n            </div>\n                <br/>\n                 <div className=\"form-group\">\n              <label htmlFor=\"password-confirmation\">Confirm Password</label>\n              < ValidationMessage valid={this.state.passwordConfirmValid} message={this.state.errorMsg.passwordConfirm} />\n              <input type=\"password\" name=\"last-name\" placeholder=\"Last-Name\" value={this.state.passwordConfirm} onChange={(e) => this.updatePasswordConfirm(e.target.value)} />\n            </div> \n                <div className=\"footer\">\n          <button type=\"button\" className=\"btn\" disabled={!this.state.formValid}>\n            Register\n          </button>\n        </div> */}\n         <div className=\"forms\">\n        <label>\n          Firstname\n          <input \n            type=\"text\" \n            label=\"name\"\n            value={this.state.firstName}\n            onChange={event => this.setState({ firstName: event.target.value })}\n            placeholder=\"Enter Firstname\" \n            required \n          />\n          </label>\n          </div>\n\n          <div className=\"forms\">\n        <label>\n          Lastname\n          <input \n            type=\"text\" \n            label=\"name\"\n            value={this.state.LastName}\n            onChange={event => this.setState({ LastName: event.target.value })}\n            placeholder=\"Enter LastName\" \n            required \n          />\n          </label>\n          </div>\n          <div className=\"forms\">\n        <label>\n          phoneName\n          <input \n            type=\"text\" \n            label=\"name\"\n            value={this.state.phoneName}\n            onChange={event => this.setState({ phoneName: event.target.value })}\n            placeholder=\"Enter phoneName\" \n            required \n          />\n          </label>\n          </div>\n          <div className=\"forms\">\n        <label>\n          Email\n          <input \n            type=\"text\" \n            label=\"name\"\n            value={this.state.Email}\n            onChange={event => this.setState({ Email: event.target.value })}\n            placeholder=\"Enter Email\" \n            required \n          />\n          </label>\n          </div>\n          <div className=\"forms\">\n        <label>\n          password\n          <input \n            type=\"text\" \n            label=\"name\"\n            value={this.state.password}\n            onChange={event => this.setState({ password: event.target.value })}\n            placeholder=\"Enter password\" \n            required \n          />\n          </label>\n          </div>\n          <div className=\"forms\">\n        <label>\n          confirmPassword\n          <input \n            type=\"text\" \n            label=\"name\"\n            value={this.state.confirmPassword}\n            onChange={event => this.setState({ confirmPassword: event.target.value })}\n            placeholder=\"Enter confirmPassword\" \n            required \n          />\n          </label>\n          </div>\n          <div className=\"btn\">\n          <button>Register</button>\n          </div>\n       \n\n\n\n\n\n\n\n\n              </form> \n            </div>\n          </div>\n        </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}